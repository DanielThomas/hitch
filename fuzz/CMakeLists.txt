cmake_minimum_required (VERSION 3.0.2)
project (hitch C)

option(GPROF        "Enable profiling with gprof" OFF)
option(LTO_ENABLE   "Enable LTO builds" ON)
option(MINIMAL      "Minimal build" OFF)
option(DEBUGGING    "Debugging build" OFF)
option(GCSECTIONS   "Garbage collect empty sections" OFF)
option(NATIVE       "Enable native performance" ON)
option(SANITIZE     "Enable asan/ubsan sanitizers" OFF)
option(LIBFUZZER    "Enable fuzzing with clang libfuzzer" OFF)
option(LIBCPP       "Enable compiling with libc++ and linking with LLD" OFF)

set(CMAKE_C_FLAGS "-Wall -Wextra -std=c11 -O2 -g")

if (LTO_ENABLE)
    if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto=thin")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto=thin -fuse-ld=lld")
    else()
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -flto")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -flto=8")
    endif()
endif()

if (GPROF)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pg")
endif()

if (DEBUGGING)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0")
elseif (MINIMAL)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os")
endif()

if (NATIVE)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native")
endif()

if (LIBFUZZER)
	set(SANITIZE TRUE)
	set(FUZZER_CFLAGS "-fsanitize=fuzzer-no-link" "-fno-omit-frame-pointer" "-fsanitize-coverage=edge")
	set(FUZZER_LFLAGS "-fsanitize=fuzzer,address,undefined")
endif()
if (SANITIZE)
    set(SANITIZE_FLAGS "-fsanitize=address,undefined")
endif()

if (GCSECTIONS)
	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffunction-sections -fdata-sections")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-gc-sections")
endif()

add_subdirectory(libforeign)
add_subdirectory(hitch build_hitch)
